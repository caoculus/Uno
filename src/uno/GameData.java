package uno;

import org.jetbrains.annotations.NotNull;

/**
 * Class for holding game data to be sent from the server. Generated by
 * converting a record into a class.
 */
final class GameData {
    private final int activePlayer;
    private final int lastPlayed;
    private final int lastAttacked;
    private final int[][] scores;
    private final boolean canCallUno;
    private final boolean canChallengeUno;
    private final boolean isGameOver;
    private final CardColor wildColor;
    private final Card topCard;
    private final Card[] playableCards;
    private final Card[] lastDrawnCards;
    private final Card[][] hands;
    private final Direction direction;
    private final GameState state;
    private final GameMove lastMove;

    GameData(@NotNull Game game) {
        this(game.getActivePlayer(), game.getLastPlayed(),
            game.getLastAttacked(), game.getScores(), game.canCallUno(),
            game.canChallengeUno(), game.isGameOver(), game.getWildColor(),
            game.getTopCard(), game.getPlayableCards(),
            game.getLastDrawnCards(), game.getHands(), game.getDirection(),
            game.getState(), game.getLastMove());
    }

    private GameData(int activePlayer, int lastPlayed, int lastAttacked,
                     int[][] scores, boolean canCallUno,
                     boolean canChallengeUno, boolean isGameOver,
                     CardColor wildColor, Card topCard, Card[] playableCards,
                     Card[] lastDrawnCards, Card[][] hands, Direction direction,
                     GameState state, GameMove lastMove) {
        this.activePlayer = activePlayer;
        this.lastPlayed = lastPlayed;
        this.lastAttacked = lastAttacked;
        this.scores = scores;
        this.canCallUno = canCallUno;
        this.canChallengeUno = canChallengeUno;
        this.isGameOver = isGameOver;
        this.wildColor = wildColor;
        this.topCard = topCard;
        this.playableCards = playableCards;
        this.lastDrawnCards = lastDrawnCards;
        this.hands = hands;
        this.direction = direction;
        this.state = state;
        this.lastMove = lastMove;
    }

    public int activePlayer() {
        return activePlayer;
    }

    public int lastPlayed() {
        return lastPlayed;
    }

    public int lastAttacked() {
        return lastAttacked;
    }

    public int[][] scores() {
        return scores;
    }

    public boolean canCallUno() {
        return canCallUno;
    }

    public boolean canChallengeUno() {
        return canChallengeUno;
    }

    public boolean isGameOver() {
        return isGameOver;
    }

    public CardColor wildColor() {
        return wildColor;
    }

    public Card topCard() {
        return topCard;
    }

    public Card[] playableCards() {
        return playableCards;
    }

    public Card[] lastDrawnCards() {
        return lastDrawnCards;
    }

    public Card[][] hands() {
        return hands;
    }

    public Direction direction() {
        return direction;
    }

    public GameState state() {
        return state;
    }

    public GameMove lastMove() {
        return lastMove;
    }
}
